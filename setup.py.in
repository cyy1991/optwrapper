from distutils.core import setup
from distutils.extension import Extension
from Cython.Build import cythonize
import numpy as np
from os import environ

major = "0"
minor = "9+"

environ[ "CC" ] = "@cc@"
environ[ "CXX" ] = "@cxx@"

extra_params = { "include_dirs": @headers@ + [ np.get_include() ],
                 "extra_compile_args": ["-Wno-unused-variable"] }

extensions = list()
extensions.append( Extension( "optwrapper.utils",
                              sources = [ "optwrapper/utils.pyx" ],
                              **extra_params ) )
extensions.append( Extension( "optwrapper.base",
                              sources = [ "optwrapper/base.pyx" ],
                              **extra_params ) )
if( @lssol@ ):
    extensions.append( Extension( "optwrapper.lssol",
                                  sources = [ "optwrapper/lssol.pyx" ],
                                  libraries = [ "lssol" ],
                                  **extra_params ) )
if( @npsol@ ):
    extensions.append( Extension( "optwrapper.npsol",
                                  sources = [ "optwrapper/npsol.pyx" ],
                                  libraries = [ "npsol",
                                                "lssol" ],
                                  **extra_params ) )
if( @snopt@ ):
    extensions.append( Extension( "optwrapper.snopt",
                                  sources = [ "optwrapper/snopt.pyx" ],
                                  libraries = [ "snopt7" ],
                                  **extra_params ) )
if( @ipopt@ ):
    extensions.append( Extension( "optwrapper.ipopt",
                                  sources = [ "optwrapper/ipopt.pyx" ],
                                  libraries = [ "ipopt" ],
                                  **extra_params ) )
if( @qpoases@ ):
    extensions.append( Extension( "optwrapper.qpoases",
                                  sources = [ "optwrapper/qpoases.pyx" ],
                                  libraries = [ "qpoases" ],
                                  language = "c++",
                                  **extra_params ) )
if( @glpk@ ):
    extensions.append( Extension( "optwrapper.glpk",
                                  sources = [ "optwrapper/glpk.pyx" ],
                                  libraries = [ "glpk" ],
                                  **extra_params ) )

setup( name = "optwrapper",
       version = "{0}.{1}".format( major, minor ),
       description = "Common interface for numerical optimization solvers",
       license = "BSD 2-Clause",
       maintainer = "Humberto Gonzalez",
       maintainer_email = "hgonzale@gmail.com",
       download_url = "https://github.com/hgonzale/optwrapper",
       packages = [ "optwrapper" ],
       ext_modules = cythonize( extensions ) )
