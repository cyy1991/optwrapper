This is a Python wrapper for the SNOPT,NPSOL,NLOPT and IPOPT
optimization libraries

Installation process:

0) Before installing, make sure you already have the python packages for cython, python-dev, 
SciPy and NumPy installed. If not, run the command
"sudo apt-get install cython python-dev python-numpy python-scipy"

1) Install SNOPT and place the library files libblas.so, libblas_c.so
libsnopt.so, libsnopt_c.so, libsnprint.so, libsnprint_c.so in the same directory. 
Let this be <SNOPT-LIB-DIR>.

2) Install NPSOl and place the library files libblas.so, libblas_c.so, 
libnpsol.so, libnpsol_c.sp, liblssol.so, liblssol_c.so in the same directory. 
Let this be <NPSOL-LIB-DIR>.

3) Install NLOPT from http://ab-initio.mit.edu/wiki/index.php/NLopt_Installation, 
and use the shared library option.
i.e. ./configure --enable-shared
Identify the installation directory of libnlopt.so and let this be 
<NLOPT-LIB-DIR>

4) Install IPOPT from http://www.coin-or.org/download/source/Ipopt/Ipopt-3.11.5.tgz 
and place the library files libcoinblas.so, libcoinhsl.so, libcoinlapack.so, libcoinmetis.so,
 libcoinmumps.so, libipopt.so in the same directory. 
Let  this be <IPOPT-LIB-DIR>. 
Place the header file IpCStdInterface.h in another directory 
and let this be <IPOPT-INC-DIR>. 
Download the python ipopt package from https://pypi.python.org/packages/source/i/ipopt/ipopt-0.1.3.zip. 
Within this package, edit the file setup.py so that the lines containing 
IPOPT_ICLUDE_DIRS and IPOPT_LIB_DIRS point to <IPOPT-INC-DIR> and <IPOPT-LIB-DIR> respectively. 
Run the command "sudo python setup.py install" to install the python ipopt package.

5) Edit the script file "setupsnopt" so that lines 4 and 5 point to <SNOPT-LIB-DIR>. 
Run the script to setup the python  interface for SNOPT. 
The library file snoptwrapper.so should be generated in the same directory. 

6) Edit the script file "setupnpsol" so that lines 4 and 5 point to <NPSOL>. 
Run the script to setup the python  interface for NPSOL. 
The library file npsolwrapper.so should be generated in the same directory. 
Note: There might be a problem with NPSOL and SNOPT having separate BLAS libraries
        I fixed this by renaming the NPSOL ones to 
        libblas_npsol.so and libblas_c_npsol.so

7) To check whether the python packages for solver classes installed correctly,first run the command 
"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:<SNOPT-LIB-DIR>:<NPSOL-LIB-DIR>:<NLOPT-LIB-DIR>:<IPOPT-LIB-DIR>".
Then start a Python console in this directory and type the commands 
from snoptwrapper import SnoptSolver
from npsolwrapper import NpsolSolver
import nlopt
import ipopt
If the packages can be imported without throwing any errors, 
then the packages have been installed successfully.

8) The problem class OptProblem is contained in the file optwrapper.py. To test this, first run the command
"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:<SNOPT-LIB-DIR>:<NPSOL-LIB-DIR>:<NLOPT-LIB-DIR>:<IPOPT-LIB-DIR>".
Then start a Python console in this directory and type the command
from optwrapper import OptProblem
The import statement should execute without throwing any errors.

9) An example of how to use OptProblem is given below:

import numpy as np
from optwrapper import OptProblem

def objf(x):
	return x[1]

def objgrad(x):
	return np.array([0,1])

def conf(x):
	return np.array([
		x[0]*x[0] + 4*x[1]*x[1],
		(x[0] - 2)*(x[0] - 2) + x[1]*x[1]
	])

def congrad(x):
	return np.matrix([
		[2*x[0],
		8*x[1]],
		[2*(x[0]-2),
		2*x[1]]
	])

prob=OptProblem(n=2,nconstraint=2,maximize=False)
prob.x_bounds([0,-1e6],[1e6,1e6])
prob.constraint_bounds([-1e6,-1e6],[4,5])
prob.set_start_x([1.0,1.0])

prob.set_objective(objf)
prob.set_objective_gradient(objgrad)
prob.set_constraint(conf)
prob.set_constraint_gradient(congrad)

if prob.check_errors() and prob.check_gradient():
	answer,finalX,status=prob.solve('SNOPT')
	print("SNOPT answer: "+str(answer))
	print("x1: "+str(finalX[0])+" x2: "+str(finalX[1]))
	print("status: "+status)

A more elaborate example is contained in the file example.py

10) Information about each specific function in OptProblem can be obtained
by typing "help(OptProblem.<function-name>)" in a Python console

